<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Animate a point along a route</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
</head>
<body>

<style>
.overlay {
    position: absolute;
    top: 10px;
    left: 10px;
}

.overlay button {
    font:600 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
    background-color: #3386c0;
    color: #fff;
    display: inline-block;
    margin: 0;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    border-radius: 3px;
}

.overlay button:hover {
    background-color:#4ea0da;
}
</style>
<script src='https://api.tiles.mapbox.com/mapbox.js/plugins/turf/v2.0.0/turf.min.js' charset='utf-8'></script>

<div id='map'></div>
<div class='overlay'>
    <button id='replay'>Replay</button>
</div>

<script>
mapboxgl.accessToken = 'pk.eyJ1IjoicGFpZ2VlbW9vZHkiLCJhIjoiY2owbDcyejhvMDJwNzJ5cDR0YXE1aG10MCJ9.a-JLnrmMPSJNwOGQdloTDA';
var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v11',
    center: [-122.47811, 37.76430],
    zoom: 17
});


// first [point in route]
// start node?
// var origin = [-122.47822523117064, 37.763514185754794];

// last point in route
// end node? 
// var destination = [-122.47836470603943, 37.76534619499628];

// A simple line from origin to destination.
// var route = {
//     "type": "FeatureCollection",
//     "features": [{
//         "type": "Feature",
//         "geometry": {
//             "type": "LineString",
//             "coordinates": [
//                 origin,
//                 destination
//             ]
//         }
//     }]
// };

// A line from origin to destination - does not change.
// var route = {
//     "type": "FeatureCollection",
//     "features": [{
//         "type": "Feature",
//         "properties": {},
//         "geometry": {
//             "type": "LineString",
//             "coordinates": [
//                 origin,
//                 destination
//             ]
//         }
//     }]
// };

// route is the geometry of the edge
// will need to add something so that the coordinates go in the right oder
// might need to reverse coordinates?  

var route = {
"type": "FeatureCollection",
"features": [{
    "type": "Feature",
    "properties": {},
    "geometry": {
        "type": "LineString",
        "coordinates": [
              [
                -122.47915863990782,
                37.765329232155906
              ],
              [
                -122.47763514518739,
                37.76500693744932
              ],
              [
                -122.47852563858032,
                37.76406548960531
              ],
              [
                -122.47751712799072,
                37.76308162139503
              ]
            ]
        }   
    }]
};

// A single point that animates along the route.
// Coordinates are initially set to the first coordinate 
// in the route
var point = {
    "type": "FeatureCollection",
    "features": [{
        "type": "Feature",
        "properties": {},
        "geometry": {
            "type": "Point",
            "coordinates": route.features[0].geometry.coordinates[0]
        }
    }]
};

// // Calculate the distance in kilometers between route start/end point.
var lineDistance = turf.lineDistance(route.features[0], 'kilometers');

// var lineDistance = turf.lineDistance(route.features[0], 'kilometers');

console.log("lineDistance:",lineDistance);

// initialize an arc list, segments along the route will be added to the arc
// each item in arc will be one coordinatate
var arc = [];

// Number of steps to use in the arc and animation, more steps means
// a smoother arc and animation, but too many steps will result in a
// low frame rate
var steps = 500; // lower steps = faster movement along route 

console.log("steps:",steps);


let total_i = 0;


// Draw an arc between the `origin` & `destination` of the two points
for (var i = 0; i < lineDistance; i += lineDistance / steps) {

    // i is the distance you've traveled along the route
    // console.log("i:", i);

    // let input_line = route.features[0

    let input_line = route.features[0];

    const distance_along_line = i; 

    // turf.along takes a LineString and 
    // returns a Point at a specified distance along the line.
    var segment = turf.along(input_line, distance_along_line, 'kilometers');
    console.log();
    console.log("segment:", segment);
    arc.push(segment.geometry.coordinates);

    total_i += 1
}


console.log("total_i:", total_i);

console.log("arc:",arc)

// Update the route with calculated arc coordinates
// route.features[0].geometry.coordinates = arc;

route.features[0].geometry.coordinates = arc;

// Used to increment the value of the point measurement against the route.
var counter = 0;

map.on('load', function () {
    // Add a source and layer displaying a point which will be animated in a circle.
    // map.addSource('route', {
    //     "type": "geojson",
    //     "data": route
    // });

    map.addSource('route', {
        "type" : "geojson",
        "data" : route
    });

    map.addSource('point', {
        "type": "geojson",
        "data": point
    });

    // map.addLayer({
    //     "id": "route",
    //     "source": "route",
    //     "type": "line",
    //     "paint": {
    //         "line-width": 2,
    //         "line-color": "#007cbf"
    //     }
    // });


    map.addLayer({
        "id": "route",
        "source": "route",
        "type": "line",
        "paint": {
            "line-width": 4,
            "line-color": "#007cbf"
        }
    });

    map.addLayer({
        "id": "point",
        "source": "point",
        "type": "symbol",
        "layout": {
            "icon-image": "zoo-15",
            "icon-rotate": ["get", "bearing"],
            "icon-rotation-alignment": "map",
            "icon-allow-overlap": true,
            "icon-ignore-placement": true,
            "icon-size": 2
        }
    });
    
    function animate() {
        // Update point geometry to a new position based on counter denoting
        // the index to access the arc.
        // point.features[0].geometry.coordinates = route.features[0].geometry.coordinates[counter];

        // trying with straight line 
        point.features[0].geometry.coordinates = route.features[0].geometry.coordinates[counter];

        // Calculate the bearing to ensure the icon is rotated to match the route arc
        // The bearing is calculate between the current point and the next point, except
        // at the end of the arc use the previous point and the current point
        point.features[0].properties.bearing = turf.bearing(
            // turf.point(route.features[0].geometry.coordinates[counter >= steps ? counter - 1 : counter]),
            // turf.point(route.features[0].geometry.coordinates[counter >= steps ? counter : counter + 1])
            turf.point(route.features[0].geometry.coordinates[counter >= steps ? counter - 1 : counter]),
            turf.point(route.features[0].geometry.coordinates[counter >= steps ? counter : counter + 1])
        );

        point.features[0].properties.bearing = point.features[0].properties.bearing - 90;

        // Update the source with this new data.
        map.getSource('point').setData(point);

        // Request the next frame of animation so long the end has not been reached.
        if (counter < steps) {
            requestAnimationFrame(animate);
        }

        counter = counter + 1;

        console.log("bearing:", point.features[0].properties.bearing);
    }

    document.getElementById('replay').addEventListener('click', function() {
        // Set the coordinates of the original point back to origin
        // point.features[0].geometry.coordinates = origin;

        point.features[0].geometry.coordinates = route.features[0].geometry.coordinates[0];

        // Update the source layer
        map.getSource('point').setData(point);

        // Reset the counter
        counter = 0;

        // Restart the animation.
        animate(counter);
    });

    // Start the animation.
    animate(counter);
});
</script>

</body>
</html>